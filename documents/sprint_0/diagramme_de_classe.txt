@startuml

interface Case << interface >> {
  + estTraversable(): boolean
  + toString(): String
}
class CaseMur {
  + CaseMur() 
  + toString(): String
  + estTraversable(): boolean
}
class CaseSortie {
  + CaseSortie() 
  + toString(): String
  + estTraversable(): boolean
}
class CaseVide {
  + CaseVide() 
  + estTraversable(): boolean
  + toString(): String
}
class Jeu {
  - labyrinthe: Labyrinthe
  - joueur: Joueur
  + Jeu()
  + Jeu(path: String)
  + getLabyrinthe(): Labyrinthe
  + getJoueur(): Joueur 
  - determinerDepart(l: Labyrinthe): int[]
  + placerJoueurSurCase(x: int,y: int): void
  + deplacerJoueur(direction: String): int
  + validerDeplacement(px: int,py: int): boolean
  + etreSurSortie(px: int,py: int): boolean
  + toString(): String
}
class Joueur {
  - y: int
  - x: int
  + Joueur(px: int, py: int) 
  + getX(): int
  + getY(): int
  + setX(): int
  + setY(): int
  + seDeplacer(px: int, py: int): void
  + toString(): String
}
class Labyrinthe {
  - hauteur: int
  - largeur: int
  - cases: ArrayList<ArrayList<Case>>
  + Labyrinthe() 
  + Labyrinthe(path: String) 
  + Labyrinthe(largeur: int,hauteur: int)
  + initialiserParDefaut(): void
  + initialiserParFichier(path: String): void
  + generer(casesTemplate: int[][]): void
  + initialiserParGenerationAutomatique(): void
  + getCase(x: int,y: int): Case
  + getCases(): ArrayList<ArrayList<Case>>
  + getLargeur(): int
  + getHauteur(): int
  + getXMilieu(): int
  + getYMilieu(): int
  + initialiserPourTest(): void
  + toString(): String
}

CaseMur     -[#008200,dashed]-^  Case       
CaseSortie  -[#008200,dashed]-^  Case       
CaseVide    -[#008200,dashed]-^  Case       
Jeu o-> Labyrinthe : labyrinthe
Jeu o-> Joueur : joueur
Labyrinthe --> Case : cases
@enduml