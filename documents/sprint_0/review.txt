SPRINT REVIEW : fonctionnalités réalisées et validées (ou pas)

1)
FONCTIONNALITE : Création d'un labyrinthe par défaut

PREVU :
  - Initialisation du labyrinthe
  - Affichage en console

REALISE :
  - Initialisation du labyrinthe via un tableau d'entier. Chaque entier (chiffre) représente une case du labyrinthe
     . 0 = case vide
     . 1 = mur
     . 2 = piege dans le futur, Case vide pout le moment
     . 3 = sortie
    Ce tableau est prédéfini directement dans le code, ce qui permettra dans le futur d'avoir un labyrinthe,
    même en cas d'erreur ne permettant pas la création d'un labyrinthe aléatoire ou depuis un fichier de génération
  - Initialisation d'un labyrinthe à partir d'un fichier txt contenant des chiffres
    Ce fichier est lu puis interprété pour créer des cases.

  - Affichage en console : chaque case est représenté par un caractère :
    les cases possèdent une methode toString permettant de récupérer ce caractère.
      . . = case vide
      . # = mur
      . . = piege dans le futur, Case vide pout le moment
      . S = sortie

La fonctionnalité a été testée et est validée.

---
2)
FONCTIONNALITE : Initialiser et deplacer un joueur

PREVU :
  - Le jeu construit un joueur
  - Commandes pour deplacer le joueur (commandes console)
  - Modification des coordonnees

REALISE :
  - ...

La fonctionnalité a été testée et est validée.
---
3)
FONCTIONNALITE : Collision avec les murs

PREVU :
  - Empêcher un joueur de se deplacer sur un mur

REALISE :
  - Méthode validerDeplacement dans la classe Jeu: 
  On récupère la case voulu, on vérifie avant que la case est bien traversable (seul les murs ne sont pas traversable en l'état actuel).
  On renvoie un booléen contenant l'information déterminé juste avant.

  - Méthode déplacerJoueur dans la classe Jeu:
  Avant de réaliser le déplacement, on doit tester que le déplacement est bien valide à l'aide de la méthode validerDeplacement (condition if).  

  - Cette fonctionnalité nous a amené à l'utilisation et/ou la création de méthodes dans les classes Joueur (getteur sur les coordonnées 
  du joueur), Labyrinthe (getter sur une case du labyrinthe), ainsi que les classes implémentent l'interface Case (méthode estTraversable).

La fonctionnalité a été testée et est validée.

---
4)
FONCTIONNALITE : Gestion de la sortie

PREVU :
  - Lorsque le joueur passe sur la case de sortie, le niveau est complété

REALISE :
  - Méthode etreSurSortie dans la classe Jeu:
	On récupère la case aux coordonnées x,y données en paramètres puis on regarde si cette case est une instance de la classe CaseSortie
	On renvoie true si c'est le cas

  - Changement dans le fonctionnement du déplacement et du jeu
	La méthode deplacerJoueur renvoie désormais un int au lieu d'un boolean pour pouvoir dissocier les différents cas (0 si le déplacement est autorisé, 1 sinon et 2 si ce déplacement amène sur une sortie)
	Le main va donc tester si la valeur renvoyée par deplacerJoueur, si c'est 2 le jeu s'arrête et on print un message de fin, si c'est 1 on indique qu'il y a une collision sinon on déplace le joueur
	

La fonctionnalité a été testée et est validée.
