SPRINT REVIEW : fonctionnalités réalisées et validées (ou pas)

1)
FONCTIONNALITE : Création d'un labyrinthe par défaut

PREVU :
  - Initialisation du labyrinthe
  - Affichage en console

REALISE :
  - Initialisation du labyrinthe via un tableau d'entier. Chaque entier (chiffre) représente une case du labyrinthe
     . 0 = case vide
     . 1 = mur
     . 2 = piege dans le futur, Case vide pout le moment
     . 3 = sortie
    Ce tableau est prédéfini directement dans le code, ce qui permettra dans le futur d'avoir un labyrinthe,
    même en cas d'erreur ne permettant pas la création d'un labyrinthe aléatoire ou depuis un fichier de génération
  - Initialisation d'un labyrinthe à partir d'un fichier txt contenant des chiffres
    Ce fichier est lu puis interprété pour créer des cases.

  - Affichage en console : chaque case est représenté par un caractère :
    les cases possèdent une methode toString permettant de récupérer ce caractère.
      . . = case vide
      . # = mur
      . . = piege dans le futur, Case vide pout le moment
      . S = sortie

La fonctionnalité a été testée et est validée.

---
2)
FONCTIONNALITE : Initialiser et deplacer un joueur

PREVU :
  - Le jeu construit un joueur
  - Commandes pour deplacer le joueur (commandes console)
  - Modification des coordonnees

REALISE :
  - Classe Joueur avec constructeur prenant en paramètre les coordonnées de départ du joueur 
  - getteurs et setters afin de pouvoir récupérer et/ou fixer les coordonnées d'un joueur si besoin
  - Méthode seDéplacer(int px, int py) de la classe Joueur: 
    Cette méthode sert à faire déplacer le joueur dans une des 4 directions (gauche, droite, haut, bas). Ainsi, la valeur prise par px et py dépend de la direction 
    vers laquelle le joueur se déplace. L'un de px ou py est nécessairement égal à 0, le joueur ne pouvant pas se déplacer en diagonale, l'autre valeur est ensuite
    égale à 1 ou -1 en fonction du déplacement voulu.
  - Méthode déplacerJoueur(string direction) dans la classe Jeu:
    Cette méthode utilise notamment la méthode seDéplacer de la case Joueur afin de pouvoir appliquer les déplacements souhaités au joueur et ainsi changer ses coordonnées.
    Le paramètre "direction" correspond à une chaîne de caractère indiquant vers ou on veut que le joueur se déplace. Direction prend les valeur "gauche", "droite", "haut", et "bas".
  - Jouabilité en console : 
    L'utilisateur indique en console une des 4 directions possibles pour faire déplacer son joueur, la méthode déplacerJoueur de la classe Jeu est ensuite appelé avec le paramètre adéquat.


La fonctionnalité a été testée et est validée.
---
3)
FONCTIONNALITE : Collision avec les murs

PREVU :
  - Empêcher un joueur de se deplacer sur un mur

REALISE :
  - Méthode validerDeplacement dans la classe Jeu: 
  On récupère la case voulu, on vérifie avant que la case est bien traversable (seul les murs ne sont pas traversable en l'état actuel).
  On renvoie un booléen contenant l'information déterminé juste avant.

  - Méthode déplacerJoueur dans la classe Jeu:
  Avant de réaliser le déplacement, on doit tester que le déplacement est bien valide à l'aide de la méthode validerDeplacement (condition if).  

  - Cette fonctionnalité nous a amené à l'utilisation et/ou la création de méthodes dans les classes Joueur (getteur sur les coordonnées 
  du joueur), Labyrinthe (getter sur une case du labyrinthe), ainsi que les classes implémentent l'interface Case (méthode estTraversable).

La fonctionnalité a été testée et est validée.

---
4)
FONCTIONNALITE : Gestion de la sortie

PREVU :
  - Lorsque le joueur passe sur la case de sortie, le niveau est complété

REALISE :
  - ...

La fonctionnalité a été testée et est validée.
