@startuml

interface Case << interface >> {
  + estTraversable(): boolean
  + toString(): String
}

interface Tresor << interface >> {
  + toString(): String
}

class CaseMur {
  + CaseMur() 
  + toString(): String
  + estTraversable(): boolean
}

class CaseSortie {
  + CaseSortie() 
  + estTraversable(): boolean
  + toString(): String
}
class CaseVide {
  + CaseVide() 
  + estTraversable(): boolean
  + toString(): String
}

class CaseEffet{
  - diminutionPV: int
  - augmentationPV: int
  + CaseEffet(diminution: int,augmentation: int)
  + getType(): TypeEffet
  + getDiminutionPV(): int
  + getAugmentationPV(): int
  + estTraversable(): boolean
  + toString(): String
}

enum TypeEffet <<enumeration>>{
  PROGRESSIF
  UNIQUE
}

enum Direction <<enumeration>>{
  HAUT
  BAS
  GAUCHE
  DROIE
}

class CaseTresor{
  - ouvert: boolean
  + CaseTresor(contenu: Tresor)
  + estTraversable(): boolean
  + getContenu(): Tresor
  + setContenu(t: Tresor): Tresor
  + estOuvert(): boolean
  + toString(): String
}

class PieceArmure{
  - pointsArmure: int
  + PieceArmure(pa: int)
  + toString():String
}

class Potion{
  - augmentationPV: int
  + Potion(augmentation: int)
  + toString(): String
}

class Jeu {
  - nbMaxNiveau: int
  - verrousEntite: ArrayList<Object>
  + Jeu()
  + Jeu(path: String)
  + getLabyrinthe(): Labyrinthe
  + getEntites(): ArrayList<Entite>
  + getJoueur(): Joueur
  + getEntite(position: int): Entite
  + getThreadsMonstre(): ArrayList<ThreadMonstre>
  + getVerrousEntite(): ArrayList<Object>
  - determinerDepart(l: Labyrinthe): int[]
  + placerJoueurSurCase(x: int,y: int): void
  + deplacerJoueur(direction: Direction): int
  + deplacerEntite(position: int, x: int, y: int): void
  + validerDeplacement(px: int,py: int): boolean
  + etreSurSortie(px: int,py: int): boolean
  + etreProcheCaseTresor(): int[]
  + demarrerPartie(): void
  + controles(commandes: String): void
  + changerNiveau(): void
  + joueurAPortee(position: int): boolean
  + attaquerJoueur(position: int): void
  + mortJoueur(): void
  + creerMonstres(nbLabyrinthe: int): void
  + toString(): String
}

class Labyrinthe {
  - hauteur: int
  - largeur: int
  - nbLabyrinthe: int
  + Labyrinthe(difficultee: int) 
  + Labyrinthe(path: String, difficultee: int) 
  + Labyrinthe(largeur: int,hauteur: int, difficultee: int)
  + initialiserParDefaut(): void
  + initialiserParFichier(path: String): void
  + generer(casesTemplate: int[][]): void
  + initialiserParGenerationAutomatique(): void
  + getCase(x: int,y: int): Case
  + getCases(): ArrayList<ArrayList<Case>>
  + setCase(x: int, y: int, c: Case): void
  + getLargeur(): int
  + getHauteur(): int
  + getXMilieu(): int
  + getYMilieu(): int
  + initialiserPourTest(): void
  + creerTresors(): void
  + creerCasesEffets(): void
  + toString(): String
}

abstract Entite <<abstract>>{
  - x : int
  - y : int
  - pointsVie : int
  - pointsArmure: int
  + Entite(x: int,y: int,pv: int,pa: int)
  + getX() : int
  + getY() : int
  + getPointsVie(): int
  + getPointsArmure(): int
  + getArme(): Arme
  + prendreDegat(retrait : int) : boolean
  + {abstract} attaquer(entites: ArrayList<Entite>): void
  + {abstract} seDeplacer(direction: Direction): void
}

class Gobelin {
  + Gobelin(x: int, y: int,pv: int,pa: int, arme: Arme)
  + attaquer(entites: ArrayList<Entite>): void
  + seDeplacer(direction: Direction): void
  + estTraversable(c: Case): boolean
  + toString(): String
}

class Fantome {
  + Fantome(x: int,y: int,pv: int,pa: int, arme: Arme)
  + attaquer(entites: ArrayList<Entite>): void
  + seDeplacer(direction: Direction): void
  + estTraversable(c: Case): void
  + toString(): String
}

class Joueur {
  + Joueur(px: int, py: int, pv: int, pa: int)
  + getInventaire(): ArrayList<Potion>
  + seDeplacer(direction: String): void
  + attaquer(): void
  + pouvoirEtreSurCaseSpecial(): boolean
  + ramasserArme(a: Arme): void
  + deposerArme(): void
  + utiliserInventaire(position: int): void
  + ramasserPotion(Potion): void
  + modifierPV(pv: int): void
  + ramasserArmure(pointsArmure: int): void
  + toString(): String
}

class Arme {
  - nom: String
  - degat: int
  - portee: int
  + Arme(nom: String, degat: int, portee: int, zone: int)
  + getNom(): String
  + getDegat(): int
  + getPortee(): int
  + getZone(): ZoneAttaque
}

class Thread {}

class ThreadMonstre{
  - positionArray: int
  + ThreadMonstre(position: int)
  + run(): void
}

enum ZoneAttaque <<enumeration>> {
  CASE_DEVANT
  ARC_DE_CERCLE
  EN_CARRE
}

interface Monstre << interface >>{
  + attaquer(entites: ArrayList<Entite>): void
  + seDeplacer(direction: Direction): void
  + estTraversable(c: Case)
  + toString(): String
}

class ThreadCaseEffet {
  - {static} TempsAttente: int
  - pv: int
  + ThreadCaseEffet(pv: int)
  + run(): void
}

Entite <|-- Joueur
Entite <|-- Fantome
Entite <|-- Gobelin

CaseMur     -[#008200,dashed]-^  Case
CaseSortie  -[#008200,dashed]-^  Case
CaseVide    -[#008200,dashed]-^  Case
CaseTresor  -[#008200,dashed]-^  Case
CaseEffet   -[#008200,dashed]-^  Case

Jeu "1" *-- "1*" Labyrinthe : - labyrinthe
Jeu "1..*" *-- "1" Entite : - entites

Jeu -[#356BF2,dashed]> Direction: "use"
Entite -[#356BF2,dashed]> Direction: "use"
Joueur -[#356BF2,dashed]> Direction: "use"
Gobelin -[#356BF2,dashed]> Direction: "use"
Fantome -[#356BF2,dashed]> Direction: "use"

Labyrinthe "1..*" *--  "1" Case : - cases

CaseTresor "1" o-- "0,1" Tresor: - contenu

Potion       -[#F24F35,dashed]-^ Tresor
PieceArmure  -[#F24F35,dashed]-^ Tresor
Arme         -[#F24F35,dashed]-^ Tresor

CaseEffet "1" --> "1" TypeEffet: - type
Arme "1" --> "1" ZoneAttaque: - zone

Entite "1" o-- "0,1" Arme: - arme

Joueur "0.*" *-- "0,1" Potion: - inventaire

ThreadMonstre --|> Thread
ThreadCaseEffet --|> Thread

Jeu "1..*" *-- "1" ThreadMonstre: "- threadsMonstre"
Jeu -[dashed]> ThreadCaseEffet: "use"

Gobelin   -[#008200,dashed]-^  Monstre
Fantome   -[#008200,dashed]-^  Monstre

@enduml