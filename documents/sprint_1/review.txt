SPRINT REVIEW : fonctionnalités réalisées et validées (ou pas)

1)
FONCTIONNALITE : Génération pseudo-aléatoire du labyrinthe / Création de niveaux / Gestion difficulté

PREVU :
  - Le jeu construit un labyrinthe pseudo-aléatoirement
  - La fin d'un niveau entraine la création d'un autre niveau (qui montent en difficulté)
  - La difficulté du niveau va avoir un impact sur le nombre de monstres, de cases à effets et d'armes
  - Définition d'un nombre de niveau maximum pour gagner la partie

REALISE :
  - La succession des niveaux se fait dans la classe Jeu et non pas dans le Labyrinthe.
  - Le nombre maximal de niveaux est décidé par l'utilisateur au lancement de l'application.
  - La difficulté est décidée aléatoirement en lien avec le numéro du niveau en cours. Elle se caractérise par un nombre croissant de cases à effets et un nombre défini de trésors.
  - Le Labyrinthe construit une grille de jeu pseudo-aléatoirement : la grille est toujours différente mais suit un algorithme de génération.
  - L'algorithme implémenté est le suivant : https://fr.m.wikipedia.org/wiki/Modélisation_mathématique_d%27un_labyrinthe#Fusion_aléatoire_de_chemins
  - Par conséquent, le labyrinthe évolue au fur et à mesure du jeu, de manière aléatoire

La fonctionnalité a été testée et validée.

---
2)
FONCTIONNALITE : Création de l'interface graphique du jeu

PREVU :
  - Passage de l'affichage console à un affichage graphique
  - Utilisation d'assets pour améliorer l'expérience utilisateur
  - Création d'un HUD, d'un menu d'accueil, d'un menu échap (pour quitter si besoin), ainsi que d'un écran de victoire et de défaite
  - Mise à jour du système d'intéraction avec le jeu via les touches du clavier et la souris

REALISE :
  - ...

La fonctionnalité a été validée.

---
3)
FONCTIONNALITE : Création des monstres, des cases avec effets et des coffres dans le labyrinthe

PREVU :
  - Gérer les déplacements, les attaques, la vie et l'armure des différents monstres (Gobelin, Fantôme...)
  - S'occuper de la création et la réaction des différentes cases à effets (soin, poison, dégâts instantanés...) 
  - Création des coffres et de leur contenu (potions de soin, armes, armure...)

REALISE :
 - ...

La fonctionnalité a été testée et validée.

---
4)
FONCTIONNALITE : Gestion des attaques du joueur et des trésors (armes, potions)

PREVU :
  - Lorsque l'utilisateur appuie sur espace, le joueur attaque
  - Lorsque l'utilisateur appuie sur r, il ramasse un objet
  - Lorsque l'utilisateur clique sur une potion, il la boit

REALISE :

ATTAQUE :
  	- Méthode attaquer dans la classe Joueur:
		Prend en paramètre les entités présentes dans le labyrinthe
		Teste pour chaque entité si elle est touchée par l'attaque (attaque qui peut avoir une zone différente : les cases devant soi, en arc de cercle, en carré),
		si oui elle l'ajoute à une liste d'entité qui sera ensuite renvoyée au Jeu

	- Méthode prendreDegats dans la classe Entité :
		Renvoie un booleen "mort" qui indique si l'entité meurt à la suite du retrait de pv
		Prend en paramètre le nombre de pv à retirer, 
			si les dégâts sont supérieurs au cumul d'armure et de vie l'entité est morte
			si les dégâts sont inférieurs au cumul d'armure et de vie
				s'il n'a pas d'armure on retire des pv
				s'il a une armure, si l'armure peut encaisser tous les dégâts on retire des points d'armure
				sinon on inflige le retrait à l'armure puis le restant du retrait aux pv
				

	- Prise en charge de la commande d'attaque dans la classe Jeu :
		Appelle attaque en lui transmettant la liste des entités présentes dans le labyrinthe, reçoit celle avec les monstres touchés, si des monstres sont touchés on appelle prendreDegats

RAMASSER TRESOR :
	- Méthode ajouterPotion dans la classe Joueur :
		Si l'inventaire n'est pas rempli (5 potions max) on ajoute la potion à ce dernier

	- Prise en charge de la commande de ramassage dans Jeu :
		On teste si le joueur se trouve sur une case d'un trésor (arme ou potion)
		Si oui, on regarde le type du trésor :
			si c'est une arme on pose l'ancienne au sol et on récupère la nouvelle
			si c'est une potion on appelle ajouterPotion

BOIRE POTION :
	- Méthode boirePotion dans la classe Joueur :
		Si l'inventaire n'est pas vide :
			si les pv + l'ajout de la potion dépasse les pv max, on n'ajoute que ce qu'il manque pour atteindre le max
			sinon on ajoute
			on retire la potion consommée de l'inventaire 

	- Prise en charge de la commande boire dans la classe Jeu :
		Appel de la méthode boirePotion

La fonctionnalité a été testée et validée.
