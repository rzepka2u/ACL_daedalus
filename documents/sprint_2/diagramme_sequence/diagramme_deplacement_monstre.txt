@startuml Movements Monster / Sequence Diagram

title "Déplacement d'un monstre - Sequence Diagram"

== Au Préalable:\n Création et déroulement d'une partie ... ==

activate ThreadMonstre
loop boucle principal du thread (while joueur vivant & monstre vivant & labyrinthe non détruit)
    ThreadMonstre -> Thread: sleep(1000)
    ThreadMonstre -> Jeu: getEntites()
    deactivate ThreadMonstre
    activate Jeu
    ThreadMonstre <-- Jeu: entites
    deactivate Jeu
    activate ThreadMonstre
    ThreadMonstre -> Jeu: getVerrousEntites()
    deactivate ThreadMonstre
    activate Jeu
    ThreadMonstre <-- Jeu: verrousEntites
    deactivate Jeu
    activate ThreadMonstre
    ThreadMonstre -> Monstre : attaquer(entites, verrousEntites)
    deactivate ThreadMonstre
    activate Monstre
    Monstre -> Arme : getPortee()
    deactivate Monstre
    activate Arme
    Arme --> Monstre : portee
    deactivate Arme
    activate Monstre
    Monstre -> Arme : getZone()
    deactivate Monstre
    activate Arme
    Arme --> Monstre : zone
    deactivate Arme
    activate Monstre
    ThreadMonstre <-- Monstre : lAttaquees
    note right: Liste des entites touchées
    deactivate Monstre
    activate ThreadMonstre
    opt lAttaquees.size() == 0 (le joueur n'est pas à portée d'attaque)

        ThreadMonstre -> Jeu: JoueurAProxDeplacement(positionInList)
        deactivate ThreadMonstre
        activate Jeu
        note right: La méthode retourne [x,y] position de la nouvelle position\n pour se rapprocher si le joueur n'est pas trop loin, null sinon
        ThreadMonstre <-- Jeu: res = [x,y] or null
        deactivate Jeu
        activate ThreadMonstre
        alt res != null (le joueur peut être traqué)
            ThreadMonstre -> Monstre: seDeplacer(x,y)
            activate Monstre
            deactivate Monstre
        else res == null (le joueur est trop loin pour être traqué)
            ThreadMonstre -> Jeu: casesVidesAlentours(positionInList)
            deactivate ThreadMonstre
            activate Jeu
            ThreadMonstre <-- Jeu: directions (Direction[])
            deactivate Jeu
            activate ThreadMonstre
            ThreadMonstre -> Math: random()
            deactivate ThreadMonstre
            activate Math
            ThreadMonstre <-- Math: x
            deactivate Math
            activate ThreadMonstre
            note right: Mise de x dans la plage [1, taille(directions)]
            ThreadMonstre -> Monstre: getX()
            deactivate ThreadMonstre
            activate Monstre
            ThreadMonstre <-- Monstre: ancienX
            deactivate Monstre
            activate ThreadMonstre
            ThreadMonstre -> Monstre: getY()
            deactivate ThreadMonstre
            activate Monstre
            ThreadMonstre <-- Monstre: ancienY
            deactivate Monstre
            activate ThreadMonstre
            opt directions[x] == HAUT
                ThreadMonstre -> ThreadMonstre: x=ancienX-1, y=ancienY
            end
            opt directions[x] == BAS
                ThreadMonstre -> ThreadMonstre: x=ancienX+1, y=ancienY
            end
            opt directions[x] == GAUCHE
                ThreadMonstre -> ThreadMonstre: x=ancienX, y=ancienY-1
            end
            opt directions[x] == DROITE
                ThreadMonstre -> ThreadMonstre: x=ancienX, y=ancienY+1
            end  
            ThreadMonstre -> Monstre: seDeplacer(x,y)
            deactivate ThreadMonstre
            activate Monstre
            deactivate Monstre
        end
    end
end
@enduml